name: CI Pipeline

on:
    push:
        branches: [ main, develop ]
    pull_request:
        branches: [ main, develop ]

jobs:
    test:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:16-alpine
                env:
                    POSTGRES_DB: test
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'test_secret' }}
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd="pg_isready -U test -d test"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        env:
            APP_ENV: test
            DATABASE_URL: "postgresql://test:${{ secrets.POSTGRES_PASSWORD || 'test_secret' }}@127.0.0.1:5432/test"
            JWT_PASSPHRASE: f0bd246b9c3e8aa4be6591bb1275cdf6d09e0873bb5aa4d74c506bff925d7a16

        steps:
            - uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.4'
                  extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, redis
                  coverage: xdebug

            - name: Cache Composer packages
              id: composer-cache
              uses: actions/cache@v3
              with:
                  path: vendor
                  key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php-

            - name: Install dependencies
              run: composer install --prefer-dist --no-progress

            - name: Generate JWT keys
              run: |
                  mkdir -p config/jwt
                  openssl genrsa -out config/jwt/private.pem -aes256 -passout pass:$JWT_PASSPHRASE 4096
                  openssl rsa -pubout -in config/jwt/private.pem -passin pass:$JWT_PASSPHRASE -out config/jwt/public.pem

            - name: Wait for PostgreSQL to be ready
              run: |
                  for i in {1..10}; do
                    pg_isready -h 127.0.0.1 -p 5432 -U test && break
                    echo "Waiting for PostgreSQL..."
                    sleep 5
                  done
              env:
                  PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'test_secret' }}

            - name: Prepare test database (migrations + fixtures)
              run: |
                  php bin/console doctrine:database:create --env=test --if-not-exists
                  php bin/console doctrine:migrations:migrate --env=test --no-interaction
                  php bin/console doctrine:fixtures:load --env=test --no-interaction

            - name: Analyse statique avec PHPStan
              run: php ./vendor/bin/phpstan analyze

            - name: Analyse statique avec PHP-CS-Fixer
              run: php ./vendor/bin/php-cs-fixer fix --dry-run --diff --allow-risky=yes --using-cache=no

            - name: Lint Symfony
              run: php bin/console lint:container --env=prod

            - name: Run tests
              run: XDEBUG_MODE=off php -d display_errors=1 -d log_errors=1 ./bin/phpunit --testdox
